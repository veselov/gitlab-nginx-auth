# port that the service will run on, <auth_port>
port: 8970
# client ID value, as was assigned by GitLab during application creation
client-id: CLIENT-ID
# client secret value, as was assigned by GitLab during application creation
client-secret: CLIENT-SECRET
# The context path the authenticator can be accessed at, <auth_context>
root-path: /_gitlab
# the top-level URL of the GitLab server
gitlab-url: https://gitlab.com/
# the top-level URL of the resource server, used to generate
# callback URLs. The <callback-url>/<auth_context>/finish_login
# must match the Callback URL configured in GitLab for the
# corresponding application
callback-url: http://resource.com
# the name of the cookie that is used by the authenticator to
# cache the credentials provided by GitLab.
cookie-name: _this_auth
# the path the cookie should apply to. This, generally, must cover
# all protected resources, and in most cases will be "/", unless
# all protected resources stem from a specific context path.
cookie-path: /oauth_test
# whether mark cookie as secure. This should be set to true if
# the resource URL is secure.
secure-cookie: false
# To support accepting personal access tokens, specify header
# where such token should be found. If the token is found in
# the request, then the cookie is not checked.
# pat-header: x-gitlab-access

# the access control section controls which users have access
# to which resources. Access control can only be done by means of
# groups. A user must be part of a specific GitLab group, with at
# least level of 10 (Guest) to be able to access the resource.
# There can be as many access control statements as necessary,
# and they must be arranged into an array.
access-control:
  -
    # each array element of an access control statement defines which
    # group(s) are required to access a URL with the specified pattern.
    # Elements are tested in the same order they are specified in this
    # configuration file. The evaluation finishes if, and only if:
    # - evaluation ran out of elements to consider, in which case
    #   access is denied
    # - evaluation found a pattern that match the request URI, and
    #   the user was found to be part of at least one listed group,
    #   in which case the access is granted. The pattern is evaluated
    #   according to perlre (https://perldoc.perl.org/perlre.html)
    pattern: ^/oauth-test[/].*
    groups: [ "x", "babies" ]
  -
    pattern: ^/nothing[/].*
    groups: [ "au" ]

# Specify file where the service should store its logs. This property
# can be unset, in which case the log is printed to stdout.
log: gitlab-nginx.log

# Specify the page size used for making requests to GitLab (to get the users'
# group list). Default is 40. Too large of a page size may strain the request,
# and too small will lead to large number of requests needed to verify the
# identity
# page-size: 40

# To enable caching of the responses from Gitlab (which can be quite slow)
# specify the amount of seconds the responses should be cached for.
# Cache is reloaded after expiration, or if the user does not have any
# of the groups required by the resource (so if the user is added to a
# missing group, it's not necessary to wait until the cache is expired
# until the effects are registered)
# data-cache-sec: 3600

# If enabled, then a ./refused_login endpoint will use this template
# to display a page explaining why access has been refused. The template
# receives a structure with "Url" string property and "Groups" string array.
# "Url" is populated from the "from" URL parameter of the request, and
# "Groups" is populated with all the groups, membership to any of which would
# have allowed access to the resource.
# The template must comply to https://golang.org/pkg/text/template/
# refused-template: refused.gohtml

# the presence of this object configures and enables service providing
# signed object containing basic user information and list of the groups
# the user is a member of.
sign-user-info:
  # either private-key or shared-key property must be specified.
  # private-key must point to a PKCS#1 PEM encoded file containing private
  # key that will be used to sign the authentication data. The key must
  # either an elliptic key or an RSA key, depending on the algorithm used.
  private-key: key.pem
  # if algorithm uses a symmetric key, that symmetric key must be provided
  # here in the hexadecimal format.
  shared-key: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
  # algorithm to use for signing. The following algorithms are supported:
  # EdDSA, ES256, ES384, ES512, RS256, RS384, RS512, PS256, PS384, PS512
  # HS256, HS384, HS512
  # See https://tools.ietf.org/html/rfc7515 for more information on the
  # algorithms.
  algorithm: ES256
  # the name of the header (default x-signed_auth) that the signed authentication
  # data is returned in. The data is the compact serialization of the
  # JWS object containing the JSON serialized object of user information.
